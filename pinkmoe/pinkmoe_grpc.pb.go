// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pinkmoe.proto

package pinkmoe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PinkmoeClient is the client API for Pinkmoe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PinkmoeClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// Category management
	// group: category
	CreateCategory(ctx context.Context, in *CategoryInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
	// group: category
	UpdateCategory(ctx context.Context, in *CategoryInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: category
	GetCategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error)
	// group: category
	GetCategoryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CategoryInfo, error)
	// group: category
	DeleteCategory(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Comment management
	// group: comment
	CreateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: comment
	UpdateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: comment
	GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	// group: comment
	GetCommentById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*CommentInfo, error)
	// group: comment
	DeleteComment(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Service management
	// group: service
	CreateService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: service
	UpdateService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: service
	GetServiceList(ctx context.Context, in *ServiceListReq, opts ...grpc.CallOption) (*ServiceListResp, error)
	// group: service
	GetServiceById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*ServiceInfo, error)
	// group: service
	DeleteService(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	// Sitemeta management
	// group: sitemeta
	UpdateSitemeta(ctx context.Context, in *SitemetaInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: sitemeta
	GetSitemetaById(ctx context.Context, in *KeyReq, opts ...grpc.CallOption) (*SitemetaInfo, error)
}

type pinkmoeClient struct {
	cc grpc.ClientConnInterface
}

func NewPinkmoeClient(cc grpc.ClientConnInterface) PinkmoeClient {
	return &pinkmoeClient{cc}
}

func (c *pinkmoeClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/initDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) CreateCategory(ctx context.Context, in *CategoryInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	out := new(BaseIDResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/createCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) UpdateCategory(ctx context.Context, in *CategoryInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/updateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetCategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error) {
	out := new(CategoryListResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetCategoryById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*CategoryInfo, error) {
	out := new(CategoryInfo)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getCategoryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) DeleteCategory(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/deleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) CreateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/createComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) UpdateComment(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/updateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetCommentById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*CommentInfo, error) {
	out := new(CommentInfo)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getCommentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) DeleteComment(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/deleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) CreateService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/createService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) UpdateService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/updateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetServiceList(ctx context.Context, in *ServiceListReq, opts ...grpc.CallOption) (*ServiceListResp, error) {
	out := new(ServiceListResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getServiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetServiceById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getServiceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) DeleteService(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/deleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) UpdateSitemeta(ctx context.Context, in *SitemetaInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/updateSitemeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinkmoeClient) GetSitemetaById(ctx context.Context, in *KeyReq, opts ...grpc.CallOption) (*SitemetaInfo, error) {
	out := new(SitemetaInfo)
	err := c.cc.Invoke(ctx, "/pinkmoe.Pinkmoe/getSitemetaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PinkmoeServer is the server API for Pinkmoe service.
// All implementations must embed UnimplementedPinkmoeServer
// for forward compatibility
type PinkmoeServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// Category management
	// group: category
	CreateCategory(context.Context, *CategoryInfo) (*BaseIDResp, error)
	// group: category
	UpdateCategory(context.Context, *CategoryInfo) (*BaseResp, error)
	// group: category
	GetCategoryList(context.Context, *CategoryListReq) (*CategoryListResp, error)
	// group: category
	GetCategoryById(context.Context, *IDReq) (*CategoryInfo, error)
	// group: category
	DeleteCategory(context.Context, *IDsReq) (*BaseResp, error)
	// Comment management
	// group: comment
	CreateComment(context.Context, *CommentInfo) (*BaseUUIDResp, error)
	// group: comment
	UpdateComment(context.Context, *CommentInfo) (*BaseResp, error)
	// group: comment
	GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error)
	// group: comment
	GetCommentById(context.Context, *UUIDReq) (*CommentInfo, error)
	// group: comment
	DeleteComment(context.Context, *UUIDsReq) (*BaseResp, error)
	// Service management
	// group: service
	CreateService(context.Context, *ServiceInfo) (*BaseUUIDResp, error)
	// group: service
	UpdateService(context.Context, *ServiceInfo) (*BaseResp, error)
	// group: service
	GetServiceList(context.Context, *ServiceListReq) (*ServiceListResp, error)
	// group: service
	GetServiceById(context.Context, *UUIDReq) (*ServiceInfo, error)
	// group: service
	DeleteService(context.Context, *UUIDsReq) (*BaseResp, error)
	// Sitemeta management
	// group: sitemeta
	UpdateSitemeta(context.Context, *SitemetaInfo) (*BaseResp, error)
	// group: sitemeta
	GetSitemetaById(context.Context, *KeyReq) (*SitemetaInfo, error)
	mustEmbedUnimplementedPinkmoeServer()
}

// UnimplementedPinkmoeServer must be embedded to have forward compatible implementations.
type UnimplementedPinkmoeServer struct {
}

func (UnimplementedPinkmoeServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedPinkmoeServer) CreateCategory(context.Context, *CategoryInfo) (*BaseIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedPinkmoeServer) UpdateCategory(context.Context, *CategoryInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedPinkmoeServer) GetCategoryList(context.Context, *CategoryListReq) (*CategoryListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedPinkmoeServer) GetCategoryById(context.Context, *IDReq) (*CategoryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryById not implemented")
}
func (UnimplementedPinkmoeServer) DeleteCategory(context.Context, *IDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedPinkmoeServer) CreateComment(context.Context, *CommentInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedPinkmoeServer) UpdateComment(context.Context, *CommentInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedPinkmoeServer) GetCommentList(context.Context, *CommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentList not implemented")
}
func (UnimplementedPinkmoeServer) GetCommentById(context.Context, *UUIDReq) (*CommentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentById not implemented")
}
func (UnimplementedPinkmoeServer) DeleteComment(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedPinkmoeServer) CreateService(context.Context, *ServiceInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedPinkmoeServer) UpdateService(context.Context, *ServiceInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedPinkmoeServer) GetServiceList(context.Context, *ServiceListReq) (*ServiceListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceList not implemented")
}
func (UnimplementedPinkmoeServer) GetServiceById(context.Context, *UUIDReq) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceById not implemented")
}
func (UnimplementedPinkmoeServer) DeleteService(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedPinkmoeServer) UpdateSitemeta(context.Context, *SitemetaInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSitemeta not implemented")
}
func (UnimplementedPinkmoeServer) GetSitemetaById(context.Context, *KeyReq) (*SitemetaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSitemetaById not implemented")
}
func (UnimplementedPinkmoeServer) mustEmbedUnimplementedPinkmoeServer() {}

// UnsafePinkmoeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PinkmoeServer will
// result in compilation errors.
type UnsafePinkmoeServer interface {
	mustEmbedUnimplementedPinkmoeServer()
}

func RegisterPinkmoeServer(s grpc.ServiceRegistrar, srv PinkmoeServer) {
	s.RegisterService(&Pinkmoe_ServiceDesc, srv)
}

func _Pinkmoe_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/initDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/createCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).CreateCategory(ctx, req.(*CategoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/updateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).UpdateCategory(ctx, req.(*CategoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetCategoryList(ctx, req.(*CategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getCategoryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetCategoryById(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/deleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).DeleteCategory(ctx, req.(*IDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/createComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).CreateComment(ctx, req.(*CommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/updateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).UpdateComment(ctx, req.(*CommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetCommentList(ctx, req.(*CommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getCommentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetCommentById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/deleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).DeleteComment(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/createService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).CreateService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/updateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).UpdateService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetServiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetServiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getServiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetServiceList(ctx, req.(*ServiceListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetServiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetServiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getServiceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetServiceById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/deleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).DeleteService(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_UpdateSitemeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SitemetaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).UpdateSitemeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/updateSitemeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).UpdateSitemeta(ctx, req.(*SitemetaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinkmoe_GetSitemetaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinkmoeServer).GetSitemetaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pinkmoe.Pinkmoe/getSitemetaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinkmoeServer).GetSitemetaById(ctx, req.(*KeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pinkmoe_ServiceDesc is the grpc.ServiceDesc for Pinkmoe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pinkmoe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pinkmoe.Pinkmoe",
	HandlerType: (*PinkmoeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Pinkmoe_InitDatabase_Handler,
		},
		{
			MethodName: "createCategory",
			Handler:    _Pinkmoe_CreateCategory_Handler,
		},
		{
			MethodName: "updateCategory",
			Handler:    _Pinkmoe_UpdateCategory_Handler,
		},
		{
			MethodName: "getCategoryList",
			Handler:    _Pinkmoe_GetCategoryList_Handler,
		},
		{
			MethodName: "getCategoryById",
			Handler:    _Pinkmoe_GetCategoryById_Handler,
		},
		{
			MethodName: "deleteCategory",
			Handler:    _Pinkmoe_DeleteCategory_Handler,
		},
		{
			MethodName: "createComment",
			Handler:    _Pinkmoe_CreateComment_Handler,
		},
		{
			MethodName: "updateComment",
			Handler:    _Pinkmoe_UpdateComment_Handler,
		},
		{
			MethodName: "getCommentList",
			Handler:    _Pinkmoe_GetCommentList_Handler,
		},
		{
			MethodName: "getCommentById",
			Handler:    _Pinkmoe_GetCommentById_Handler,
		},
		{
			MethodName: "deleteComment",
			Handler:    _Pinkmoe_DeleteComment_Handler,
		},
		{
			MethodName: "createService",
			Handler:    _Pinkmoe_CreateService_Handler,
		},
		{
			MethodName: "updateService",
			Handler:    _Pinkmoe_UpdateService_Handler,
		},
		{
			MethodName: "getServiceList",
			Handler:    _Pinkmoe_GetServiceList_Handler,
		},
		{
			MethodName: "getServiceById",
			Handler:    _Pinkmoe_GetServiceById_Handler,
		},
		{
			MethodName: "deleteService",
			Handler:    _Pinkmoe_DeleteService_Handler,
		},
		{
			MethodName: "updateSitemeta",
			Handler:    _Pinkmoe_UpdateSitemeta_Handler,
		},
		{
			MethodName: "getSitemetaById",
			Handler:    _Pinkmoe_GetSitemetaById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pinkmoe.proto",
}
