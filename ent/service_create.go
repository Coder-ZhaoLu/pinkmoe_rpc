// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Coder-ZhaoLu/pinkmoe_rpc/ent/service"
	uuid "github.com/gofrs/uuid/v5"
)

// ServiceCreate is the builder for creating a Service entity.
type ServiceCreate struct {
	config
	mutation *ServiceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ServiceCreate) SetCreatedAt(t time.Time) *ServiceCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableCreatedAt(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ServiceCreate) SetUpdatedAt(t time.Time) *ServiceCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableUpdatedAt(t *time.Time) *ServiceCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *ServiceCreate) SetStatus(u uint8) *ServiceCreate {
	sc.mutation.SetStatus(u)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableStatus(u *uint8) *ServiceCreate {
	if u != nil {
		sc.SetStatus(*u)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *ServiceCreate) SetTitle(s string) *ServiceCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetDesc sets the "desc" field.
func (sc *ServiceCreate) SetDesc(s string) *ServiceCreate {
	sc.mutation.SetDesc(s)
	return sc
}

// SetContent sets the "content" field.
func (sc *ServiceCreate) SetContent(s string) *ServiceCreate {
	sc.mutation.SetContent(s)
	return sc
}

// SetCategoryID sets the "category_id" field.
func (sc *ServiceCreate) SetCategoryID(u uint64) *ServiceCreate {
	sc.mutation.SetCategoryID(u)
	return sc
}

// SetAuthorUUID sets the "author_uuid" field.
func (sc *ServiceCreate) SetAuthorUUID(s string) *ServiceCreate {
	sc.mutation.SetAuthorUUID(s)
	return sc
}

// SetCover sets the "cover" field.
func (sc *ServiceCreate) SetCover(s string) *ServiceCreate {
	sc.mutation.SetCover(s)
	return sc
}

// SetDocument sets the "document" field.
func (sc *ServiceCreate) SetDocument(s string) *ServiceCreate {
	sc.mutation.SetDocument(s)
	return sc
}

// SetVersion sets the "version" field.
func (sc *ServiceCreate) SetVersion(s string) *ServiceCreate {
	sc.mutation.SetVersion(s)
	return sc
}

// SetType sets the "type" field.
func (sc *ServiceCreate) SetType(u uint32) *ServiceCreate {
	sc.mutation.SetType(u)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableType(u *uint32) *ServiceCreate {
	if u != nil {
		sc.SetType(*u)
	}
	return sc
}

// SetPrice sets the "price" field.
func (sc *ServiceCreate) SetPrice(u uint32) *ServiceCreate {
	sc.mutation.SetPrice(u)
	return sc
}

// SetView sets the "view" field.
func (sc *ServiceCreate) SetView(u uint64) *ServiceCreate {
	sc.mutation.SetView(u)
	return sc
}

// SetNillableView sets the "view" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableView(u *uint64) *ServiceCreate {
	if u != nil {
		sc.SetView(*u)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ServiceCreate) SetID(u uuid.UUID) *ServiceCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ServiceCreate) SetNillableID(u *uuid.UUID) *ServiceCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the ServiceMutation object of the builder.
func (sc *ServiceCreate) Mutation() *ServiceMutation {
	return sc.mutation
}

// Save creates the Service in the database.
func (sc *ServiceCreate) Save(ctx context.Context) (*Service, error) {
	sc.defaults()
	return withHooks[*Service, ServiceMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServiceCreate) SaveX(ctx context.Context) *Service {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServiceCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServiceCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServiceCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := service.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := service.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := service.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := service.DefaultType
		sc.mutation.SetType(v)
	}
	if _, ok := sc.mutation.View(); !ok {
		v := service.DefaultView
		sc.mutation.SetView(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := service.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServiceCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Service.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Service.updated_at"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Service.title"`)}
	}
	if _, ok := sc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "Service.desc"`)}
	}
	if _, ok := sc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Service.content"`)}
	}
	if _, ok := sc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "Service.category_id"`)}
	}
	if _, ok := sc.mutation.AuthorUUID(); !ok {
		return &ValidationError{Name: "author_uuid", err: errors.New(`ent: missing required field "Service.author_uuid"`)}
	}
	if _, ok := sc.mutation.Cover(); !ok {
		return &ValidationError{Name: "cover", err: errors.New(`ent: missing required field "Service.cover"`)}
	}
	if _, ok := sc.mutation.Document(); !ok {
		return &ValidationError{Name: "document", err: errors.New(`ent: missing required field "Service.document"`)}
	}
	if _, ok := sc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Service.version"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Service.type"`)}
	}
	if _, ok := sc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Service.price"`)}
	}
	if _, ok := sc.mutation.View(); !ok {
		return &ValidationError{Name: "view", err: errors.New(`ent: missing required field "Service.view"`)}
	}
	return nil
}

func (sc *ServiceCreate) sqlSave(ctx context.Context) (*Service, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServiceCreate) createSpec() (*Service, *sqlgraph.CreateSpec) {
	var (
		_node = &Service{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(service.Table, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(service.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.SetField(service.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := sc.mutation.Desc(); ok {
		_spec.SetField(service.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := sc.mutation.Content(); ok {
		_spec.SetField(service.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := sc.mutation.CategoryID(); ok {
		_spec.SetField(service.FieldCategoryID, field.TypeUint64, value)
		_node.CategoryID = value
	}
	if value, ok := sc.mutation.AuthorUUID(); ok {
		_spec.SetField(service.FieldAuthorUUID, field.TypeString, value)
		_node.AuthorUUID = value
	}
	if value, ok := sc.mutation.Cover(); ok {
		_spec.SetField(service.FieldCover, field.TypeString, value)
		_node.Cover = value
	}
	if value, ok := sc.mutation.Document(); ok {
		_spec.SetField(service.FieldDocument, field.TypeString, value)
		_node.Document = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(service.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.SetField(service.FieldType, field.TypeUint32, value)
		_node.Type = value
	}
	if value, ok := sc.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeUint32, value)
		_node.Price = value
	}
	if value, ok := sc.mutation.View(); ok {
		_spec.SetField(service.FieldView, field.TypeUint64, value)
		_node.View = value
	}
	return _node, _spec
}

// ServiceCreateBulk is the builder for creating many Service entities in bulk.
type ServiceCreateBulk struct {
	config
	builders []*ServiceCreate
}

// Save creates the Service entities in the database.
func (scb *ServiceCreateBulk) Save(ctx context.Context) ([]*Service, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Service, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServiceCreateBulk) SaveX(ctx context.Context) []*Service {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServiceCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServiceCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
