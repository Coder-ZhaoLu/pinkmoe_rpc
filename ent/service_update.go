// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Coder-ZhaoLu/pinkmoe_rpc/ent/predicate"
	"github.com/Coder-ZhaoLu/pinkmoe_rpc/ent/service"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ServiceUpdate) SetUpdatedAt(t time.Time) *ServiceUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetStatus sets the "status" field.
func (su *ServiceUpdate) SetStatus(u uint8) *ServiceUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(u)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableStatus(u *uint8) *ServiceUpdate {
	if u != nil {
		su.SetStatus(*u)
	}
	return su
}

// AddStatus adds u to the "status" field.
func (su *ServiceUpdate) AddStatus(u int8) *ServiceUpdate {
	su.mutation.AddStatus(u)
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *ServiceUpdate) ClearStatus() *ServiceUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetTitle sets the "title" field.
func (su *ServiceUpdate) SetTitle(s string) *ServiceUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetDesc sets the "desc" field.
func (su *ServiceUpdate) SetDesc(s string) *ServiceUpdate {
	su.mutation.SetDesc(s)
	return su
}

// SetContent sets the "content" field.
func (su *ServiceUpdate) SetContent(s string) *ServiceUpdate {
	su.mutation.SetContent(s)
	return su
}

// SetCategoryID sets the "category_id" field.
func (su *ServiceUpdate) SetCategoryID(u uint64) *ServiceUpdate {
	su.mutation.ResetCategoryID()
	su.mutation.SetCategoryID(u)
	return su
}

// AddCategoryID adds u to the "category_id" field.
func (su *ServiceUpdate) AddCategoryID(u int64) *ServiceUpdate {
	su.mutation.AddCategoryID(u)
	return su
}

// SetAuthorUUID sets the "author_uuid" field.
func (su *ServiceUpdate) SetAuthorUUID(s string) *ServiceUpdate {
	su.mutation.SetAuthorUUID(s)
	return su
}

// SetCover sets the "cover" field.
func (su *ServiceUpdate) SetCover(s string) *ServiceUpdate {
	su.mutation.SetCover(s)
	return su
}

// SetDocument sets the "document" field.
func (su *ServiceUpdate) SetDocument(s string) *ServiceUpdate {
	su.mutation.SetDocument(s)
	return su
}

// SetVersion sets the "version" field.
func (su *ServiceUpdate) SetVersion(s string) *ServiceUpdate {
	su.mutation.SetVersion(s)
	return su
}

// SetType sets the "type" field.
func (su *ServiceUpdate) SetType(u uint32) *ServiceUpdate {
	su.mutation.ResetType()
	su.mutation.SetType(u)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableType(u *uint32) *ServiceUpdate {
	if u != nil {
		su.SetType(*u)
	}
	return su
}

// AddType adds u to the "type" field.
func (su *ServiceUpdate) AddType(u int32) *ServiceUpdate {
	su.mutation.AddType(u)
	return su
}

// SetPrice sets the "price" field.
func (su *ServiceUpdate) SetPrice(u uint32) *ServiceUpdate {
	su.mutation.ResetPrice()
	su.mutation.SetPrice(u)
	return su
}

// AddPrice adds u to the "price" field.
func (su *ServiceUpdate) AddPrice(u int32) *ServiceUpdate {
	su.mutation.AddPrice(u)
	return su
}

// SetView sets the "view" field.
func (su *ServiceUpdate) SetView(u uint64) *ServiceUpdate {
	su.mutation.ResetView()
	su.mutation.SetView(u)
	return su
}

// SetNillableView sets the "view" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableView(u *uint64) *ServiceUpdate {
	if u != nil {
		su.SetView(*u)
	}
	return su
}

// AddView adds u to the "view" field.
func (su *ServiceUpdate) AddView(u int64) *ServiceUpdate {
	su.mutation.AddView(u)
	return su
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, ServiceMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ServiceUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(service.FieldStatus, field.TypeUint8, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(service.FieldStatus, field.TypeUint8)
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(service.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Desc(); ok {
		_spec.SetField(service.FieldDesc, field.TypeString, value)
	}
	if value, ok := su.mutation.Content(); ok {
		_spec.SetField(service.FieldContent, field.TypeString, value)
	}
	if value, ok := su.mutation.CategoryID(); ok {
		_spec.SetField(service.FieldCategoryID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedCategoryID(); ok {
		_spec.AddField(service.FieldCategoryID, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AuthorUUID(); ok {
		_spec.SetField(service.FieldAuthorUUID, field.TypeString, value)
	}
	if value, ok := su.mutation.Cover(); ok {
		_spec.SetField(service.FieldCover, field.TypeString, value)
	}
	if value, ok := su.mutation.Document(); ok {
		_spec.SetField(service.FieldDocument, field.TypeString, value)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(service.FieldVersion, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(service.FieldType, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedType(); ok {
		_spec.AddField(service.FieldType, field.TypeUint32, value)
	}
	if value, ok := su.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeUint32, value)
	}
	if value, ok := su.mutation.AddedPrice(); ok {
		_spec.AddField(service.FieldPrice, field.TypeUint32, value)
	}
	if value, ok := su.mutation.View(); ok {
		_spec.SetField(service.FieldView, field.TypeUint64, value)
	}
	if value, ok := su.mutation.AddedView(); ok {
		_spec.AddField(service.FieldView, field.TypeUint64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ServiceUpdateOne) SetUpdatedAt(t time.Time) *ServiceUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetStatus sets the "status" field.
func (suo *ServiceUpdateOne) SetStatus(u uint8) *ServiceUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(u)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableStatus(u *uint8) *ServiceUpdateOne {
	if u != nil {
		suo.SetStatus(*u)
	}
	return suo
}

// AddStatus adds u to the "status" field.
func (suo *ServiceUpdateOne) AddStatus(u int8) *ServiceUpdateOne {
	suo.mutation.AddStatus(u)
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *ServiceUpdateOne) ClearStatus() *ServiceUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetTitle sets the "title" field.
func (suo *ServiceUpdateOne) SetTitle(s string) *ServiceUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetDesc sets the "desc" field.
func (suo *ServiceUpdateOne) SetDesc(s string) *ServiceUpdateOne {
	suo.mutation.SetDesc(s)
	return suo
}

// SetContent sets the "content" field.
func (suo *ServiceUpdateOne) SetContent(s string) *ServiceUpdateOne {
	suo.mutation.SetContent(s)
	return suo
}

// SetCategoryID sets the "category_id" field.
func (suo *ServiceUpdateOne) SetCategoryID(u uint64) *ServiceUpdateOne {
	suo.mutation.ResetCategoryID()
	suo.mutation.SetCategoryID(u)
	return suo
}

// AddCategoryID adds u to the "category_id" field.
func (suo *ServiceUpdateOne) AddCategoryID(u int64) *ServiceUpdateOne {
	suo.mutation.AddCategoryID(u)
	return suo
}

// SetAuthorUUID sets the "author_uuid" field.
func (suo *ServiceUpdateOne) SetAuthorUUID(s string) *ServiceUpdateOne {
	suo.mutation.SetAuthorUUID(s)
	return suo
}

// SetCover sets the "cover" field.
func (suo *ServiceUpdateOne) SetCover(s string) *ServiceUpdateOne {
	suo.mutation.SetCover(s)
	return suo
}

// SetDocument sets the "document" field.
func (suo *ServiceUpdateOne) SetDocument(s string) *ServiceUpdateOne {
	suo.mutation.SetDocument(s)
	return suo
}

// SetVersion sets the "version" field.
func (suo *ServiceUpdateOne) SetVersion(s string) *ServiceUpdateOne {
	suo.mutation.SetVersion(s)
	return suo
}

// SetType sets the "type" field.
func (suo *ServiceUpdateOne) SetType(u uint32) *ServiceUpdateOne {
	suo.mutation.ResetType()
	suo.mutation.SetType(u)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableType(u *uint32) *ServiceUpdateOne {
	if u != nil {
		suo.SetType(*u)
	}
	return suo
}

// AddType adds u to the "type" field.
func (suo *ServiceUpdateOne) AddType(u int32) *ServiceUpdateOne {
	suo.mutation.AddType(u)
	return suo
}

// SetPrice sets the "price" field.
func (suo *ServiceUpdateOne) SetPrice(u uint32) *ServiceUpdateOne {
	suo.mutation.ResetPrice()
	suo.mutation.SetPrice(u)
	return suo
}

// AddPrice adds u to the "price" field.
func (suo *ServiceUpdateOne) AddPrice(u int32) *ServiceUpdateOne {
	suo.mutation.AddPrice(u)
	return suo
}

// SetView sets the "view" field.
func (suo *ServiceUpdateOne) SetView(u uint64) *ServiceUpdateOne {
	suo.mutation.ResetView()
	suo.mutation.SetView(u)
	return suo
}

// SetNillableView sets the "view" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableView(u *uint64) *ServiceUpdateOne {
	if u != nil {
		suo.SetView(*u)
	}
	return suo
}

// AddView adds u to the "view" field.
func (suo *ServiceUpdateOne) AddView(u int64) *ServiceUpdateOne {
	suo.mutation.AddView(u)
	return suo
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (suo *ServiceUpdateOne) Where(ps ...predicate.Service) *ServiceUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	suo.defaults()
	return withHooks[*Service, ServiceMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ServiceUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := service.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := sqlgraph.NewUpdateSpec(service.Table, service.Columns, sqlgraph.NewFieldSpec(service.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(service.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(service.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(service.FieldStatus, field.TypeUint8, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(service.FieldStatus, field.TypeUint8)
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(service.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Desc(); ok {
		_spec.SetField(service.FieldDesc, field.TypeString, value)
	}
	if value, ok := suo.mutation.Content(); ok {
		_spec.SetField(service.FieldContent, field.TypeString, value)
	}
	if value, ok := suo.mutation.CategoryID(); ok {
		_spec.SetField(service.FieldCategoryID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedCategoryID(); ok {
		_spec.AddField(service.FieldCategoryID, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AuthorUUID(); ok {
		_spec.SetField(service.FieldAuthorUUID, field.TypeString, value)
	}
	if value, ok := suo.mutation.Cover(); ok {
		_spec.SetField(service.FieldCover, field.TypeString, value)
	}
	if value, ok := suo.mutation.Document(); ok {
		_spec.SetField(service.FieldDocument, field.TypeString, value)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(service.FieldVersion, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(service.FieldType, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedType(); ok {
		_spec.AddField(service.FieldType, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.Price(); ok {
		_spec.SetField(service.FieldPrice, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.AddedPrice(); ok {
		_spec.AddField(service.FieldPrice, field.TypeUint32, value)
	}
	if value, ok := suo.mutation.View(); ok {
		_spec.SetField(service.FieldView, field.TypeUint64, value)
	}
	if value, ok := suo.mutation.AddedView(); ok {
		_spec.AddField(service.FieldView, field.TypeUint64, value)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
