// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Coder-ZhaoLu/pinkmoe_rpc/ent/sitemeta"
)

// Sitemeta is the model entity for the Sitemeta schema.
type Sitemeta struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key | 键
	Key string `json:"key,omitempty"`
	// Value | 值
	Value string `json:"value,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sitemeta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sitemeta.FieldID:
			values[i] = new(sql.NullInt64)
		case sitemeta.FieldKey, sitemeta.FieldValue:
			values[i] = new(sql.NullString)
		case sitemeta.FieldCreatedAt, sitemeta.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Sitemeta", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sitemeta fields.
func (s *Sitemeta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sitemeta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case sitemeta.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case sitemeta.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sitemeta.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				s.Key = value.String
			}
		case sitemeta.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				s.Value = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Sitemeta.
// Note that you need to call Sitemeta.Unwrap() before calling this method if this Sitemeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sitemeta) Update() *SitemetaUpdateOne {
	return NewSitemetaClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sitemeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sitemeta) Unwrap() *Sitemeta {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sitemeta is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sitemeta) String() string {
	var builder strings.Builder
	builder.WriteString("Sitemeta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(s.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(s.Value)
	builder.WriteByte(')')
	return builder.String()
}

// SitemetaSlice is a parsable slice of Sitemeta.
type SitemetaSlice []*Sitemeta
