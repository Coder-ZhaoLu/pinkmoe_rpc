// Code generated by ent, DO NOT EDIT.

package service

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Coder-ZhaoLu/pinkmoe_rpc/ent/predicate"
	uuid "github.com/gofrs/uuid/v5"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldStatus, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldTitle, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDesc, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldContent, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v uint64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCategoryID, v))
}

// AuthorUUID applies equality check predicate on the "author_uuid" field. It's identical to AuthorUUIDEQ.
func AuthorUUID(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldAuthorUUID, v))
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCover, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint32) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldType, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v uint32) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldPrice, v))
}

// View applies equality check predicate on the "view" field. It's identical to ViewEQ.
func View(v uint64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldView, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Service {
	return predicate.Service(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Service {
	return predicate.Service(sql.FieldNotNull(FieldStatus))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldTitle, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldDesc, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldContent, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v uint64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v uint64) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...uint64) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...uint64) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v uint64) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v uint64) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v uint64) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v uint64) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCategoryID, v))
}

// AuthorUUIDEQ applies the EQ predicate on the "author_uuid" field.
func AuthorUUIDEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldAuthorUUID, v))
}

// AuthorUUIDNEQ applies the NEQ predicate on the "author_uuid" field.
func AuthorUUIDNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldAuthorUUID, v))
}

// AuthorUUIDIn applies the In predicate on the "author_uuid" field.
func AuthorUUIDIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldAuthorUUID, vs...))
}

// AuthorUUIDNotIn applies the NotIn predicate on the "author_uuid" field.
func AuthorUUIDNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldAuthorUUID, vs...))
}

// AuthorUUIDGT applies the GT predicate on the "author_uuid" field.
func AuthorUUIDGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldAuthorUUID, v))
}

// AuthorUUIDGTE applies the GTE predicate on the "author_uuid" field.
func AuthorUUIDGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldAuthorUUID, v))
}

// AuthorUUIDLT applies the LT predicate on the "author_uuid" field.
func AuthorUUIDLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldAuthorUUID, v))
}

// AuthorUUIDLTE applies the LTE predicate on the "author_uuid" field.
func AuthorUUIDLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldAuthorUUID, v))
}

// AuthorUUIDContains applies the Contains predicate on the "author_uuid" field.
func AuthorUUIDContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldAuthorUUID, v))
}

// AuthorUUIDHasPrefix applies the HasPrefix predicate on the "author_uuid" field.
func AuthorUUIDHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldAuthorUUID, v))
}

// AuthorUUIDHasSuffix applies the HasSuffix predicate on the "author_uuid" field.
func AuthorUUIDHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldAuthorUUID, v))
}

// AuthorUUIDEqualFold applies the EqualFold predicate on the "author_uuid" field.
func AuthorUUIDEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldAuthorUUID, v))
}

// AuthorUUIDContainsFold applies the ContainsFold predicate on the "author_uuid" field.
func AuthorUUIDContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldAuthorUUID, v))
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldCover, v))
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldCover, v))
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldCover, vs...))
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldCover, vs...))
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldCover, v))
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldCover, v))
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldCover, v))
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldCover, v))
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Service {
	return predicate.Service(sql.FieldContains(FieldCover, v))
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasPrefix(FieldCover, v))
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Service {
	return predicate.Service(sql.FieldHasSuffix(FieldCover, v))
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Service {
	return predicate.Service(sql.FieldEqualFold(FieldCover, v))
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Service {
	return predicate.Service(sql.FieldContainsFold(FieldCover, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint32) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint32) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint32) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint32) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint32) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint32) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint32) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint32) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldType, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v uint32) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v uint32) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...uint32) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...uint32) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v uint32) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v uint32) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v uint32) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v uint32) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldPrice, v))
}

// ViewEQ applies the EQ predicate on the "view" field.
func ViewEQ(v uint64) predicate.Service {
	return predicate.Service(sql.FieldEQ(FieldView, v))
}

// ViewNEQ applies the NEQ predicate on the "view" field.
func ViewNEQ(v uint64) predicate.Service {
	return predicate.Service(sql.FieldNEQ(FieldView, v))
}

// ViewIn applies the In predicate on the "view" field.
func ViewIn(vs ...uint64) predicate.Service {
	return predicate.Service(sql.FieldIn(FieldView, vs...))
}

// ViewNotIn applies the NotIn predicate on the "view" field.
func ViewNotIn(vs ...uint64) predicate.Service {
	return predicate.Service(sql.FieldNotIn(FieldView, vs...))
}

// ViewGT applies the GT predicate on the "view" field.
func ViewGT(v uint64) predicate.Service {
	return predicate.Service(sql.FieldGT(FieldView, v))
}

// ViewGTE applies the GTE predicate on the "view" field.
func ViewGTE(v uint64) predicate.Service {
	return predicate.Service(sql.FieldGTE(FieldView, v))
}

// ViewLT applies the LT predicate on the "view" field.
func ViewLT(v uint64) predicate.Service {
	return predicate.Service(sql.FieldLT(FieldView, v))
}

// ViewLTE applies the LTE predicate on the "view" field.
func ViewLTE(v uint64) predicate.Service {
	return predicate.Service(sql.FieldLTE(FieldView, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Service) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Service) predicate.Service {
	return predicate.Service(func(s *sql.Selector) {
		p(s.Not())
	})
}
